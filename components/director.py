#! /usr/bin/env Python3from components.wall import Wallfrom components.io.io import IOclass Director:    """    It is a class for manipulation with user input and file reading    A user can send data like file description or command line parameters    """    # standart instances for object behaviour    def __init__(self):        self.data = None        print("General env has been run")    def __del__(self):        print("General env has been deleted")    # point of enter to calculation    # public instance methods    def prepare(self):        self.data = IO.data_from_file()        if self.data is None:            self.data = IO.data_from_standart_input()        return self.data    def is_running(self):        return Director.__wrap(Director.__parse(self.data))    # private class behaviour    # create a wall from raw data    @classmethod    def __wrap(cls, data):        if data is None or not Director.__is_correct(data):            print("Data isn't correct, please check it and\            run application again")            return None        return Wall(data)    # the function for check input data    @classmethod    def __is_correct(cls, data):        try:            wall_skeleton = data[0]            wall_width = int(wall_skeleton[0])            wall_height = int(wall_skeleton[1])            wall_blueprints = data[1:wall_height+1]            for blueprint in wall_blueprints:                if len(blueprint) != wall_width:                    return False            data = data[wall_height+1:]            bricks_skeleton = data[0]            bricks_count = int(bricks_skeleton[0])            bricks_blueprints = data[1:]            if len(bricks_blueprints) != bricks_count:                return False            for blueprint in bricks_blueprints:                if len(blueprint) != 3:                    return False        except Exception as e:            print("Data isn't correct, check it. Exp: ", e)            return False        return True    # wrap input data and convert to list human readable format    @classmethod    def __parse(cls, data):        try:            new_data = []            if isinstance(data, list):                for element in data:                    if isinstance(element, str):                        new_element_list = []                        element = " ".join(element.split())                        data = ""                        for i in range(0, len(element)):                            if element[i] == ' ' or element[i] == '\n':                                new_element_list.append(int(data))                                data = ""                            data += element[i]                            if i+1 == len(element):                                new_element_list.append(int(data))                        new_data.append(new_element_list)            return new_data        except Exception as e:            print("Data doesn't wraps correct, exp: ", e)            return None